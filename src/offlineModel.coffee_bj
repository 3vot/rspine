#Offline Model Init must be called before SalesforceModel

RSpine = require('rspine')
RSpine.offlineModels = [] if !RSpine.offlineModels

RSpine.Model.OfflineModel =

  initialize: ->
    for model in RSpine.offlineModels
      model.fetch() if model.autoFetch

  decorate: (klassOrKlasses) ->
    klassOrKlasses = [klassOrKlasses] if Object::toString.call(klassOrKlasses) is not '[object Array]'
    @performDecoration(klass) for klass in klassOrKlasses

  performDecoration: (klass) ->
    klass.extend RSpine.Model.OfflineModel

  extended: ->
    @change @saveLocal
    @fetch @loadLocal
    @bind "querySuccess" , @saveBulkLocal
    RSpine.offlineModels.push @
    
    @extend
      autoFetch   :  if typeof @autoFetch == "undefined" then false else @autoFetch

      beforeSaveLocal: ->
        return false;
      
      afterLoadLocal: ->
        return false;
    
      recordLastUpdate: =>
        RSpine.session.setLastUpdate(@name)

      bulkDelete: =>
        @source = @all()
        start = @source.length - 20
        start = 0 if start < 0
        to_work = @source.slice(start)
        RSpine.trigger "bulkProgress" , [start , @source.length]
        @source = @source.slice(0,start)
        for item in to_work
          item.destroy()
        setTimeout(@bulkDelete, 135) if @source.length > 0
        @trigger "bulk_deleted" if @source.length == 0

      forceDelete: ->
        localStorage[@className] = []

  saveBulkLocal: ->
    @beforeSaveLocal?()
    result = JSON.stringify(@all())
    localStorage[@className] = result

  saveLocal: ->
    @beforeSaveLocal?()
    result = JSON.stringify(@)
    localStorage[@className] = result

  loadLocal: ->
    result = localStorage[@className]
    @refresh(result or [], clear: true)
    @afterLoadLocal?()

module?.exports = RSpine.Model.OfflineModel
